# 구구단을 짜보자

##### 프로그램을 만들려면 가장 먼저 "입력"과 "출력"을 생각하라.


## 생각해야 하는 것

# 함수 이름은 ? GuGu로 짓자
# 입력받는 값은? 2
# 출력하는 값은? 2단(2,4,6,8,10,12,...,18)
# 결과는 어떤 형태로 저장하지? 연속된 자료형이니까 리스트!



### 1. 먼저 에디터를 열고 다음과 같이 입력한다. GuGu 라는 함수에 2를 입력값으로 주면 result라는 변수에 결과값을 넣으라는 뜻이다.
result = GuGu(2)



### 2. 이제 결괏값을 어떤 형태로 받을 것인지 고민해 보자. 2단이니까 2, 4, 6, … 18까지 갈 것이다. 
### 이런 종류의 데이터는 리스트 자료형이 딱이다. 따라서 result = [2, 4, 6, 8, 10, 12, 14, 16, 18] 같은 결과를 얻는 것이 좋겠다는 
### 생각을 먼저 하고 나서 프로그래밍을 시작하는 것이 필요하다. 
### 이런 식으로 머릿속에 그림이 그려지기 시작하면 의외로 생각이 가볍게 좁혀지는 것을 느낄 수 있을 것이다.



### 3. 어떻게 만들지 생각해 봤으니 1번에서 입력한 문장은 지우고 진짜 프로그램을 짜 보자. 일단 이름을 GuGu로 지은 함수를 다음과 같이 만든다.
def GuGu(n) :
    print(n)

### 위와 같은 함수를 만들고 GuGu(2)처럼 실행하면 2를 출력하게 된다. 즉 입력값으로 2가 잘 들어오는지 확인하는 것이다.



### 4. 이제 결괏값을 담을 리스트를 하나 생성하자. 앞에서 작성한 print(n)은 입력이 잘되는지 를 확인하기 위한 것이었으므로 지워도 좋다.
def GuGu(n) :
    result = []




### 5. 다음으로 result에 2, 4, 6, … 18을 어떻게 넣어야 할지 생각해 보자. 
### 다음과 같이 리스트에 요소를 추가하는 append 내장 함수를 사용하기로 결정했다.
def GuGu(n) :
    result = []
    result.append(n * 1)
    result.append(n * 2)
    result.append(n * 3)
    result.append(n * 4)
    result.append(n * 5)
    result.append(n * 6)
    result.append(n * 7)
    result.append(n * 8)
    result.append(n * 9)
    return result

print(GuGu(2))
### 정말 무식한 방법이지만 입력값 2를 주었을 때 원하는 결괏값을 얻을 수 있었다.




### 6. 그런데 위 함수는 반복이 너무 많다. 가만히 보면 result.append(n*□)의 □ 위치에 1부터 9까지 숫자만 다르게 들어가 있다는 것을 알 수 있다. 
### 똑같은 일을 반복할 때는 "반복문"을 사용한다고 했다. 그렇다면 1부터 9까지 출력해 주는 반복문을 만들면 되지 않을까?  

### 대화형 인터프리터를 열고 다음과 같이 테스트해 보았다.
i = 1
while i < 10 :
    print(i)
    i += 1




### 7. 이상의 생각을 바탕으로 완성한 GuGu 함수는 다음과 같다.
def GuGU(n) :
    result = []
    i = 1
    while i < 10 :
        result.append(n * i)
        i += 1
    return result


print(GuGu(2))

